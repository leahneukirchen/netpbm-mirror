#!/bin/sh

##############################################################################
# This is essentially a Perl program.  We exec the Perl interpreter specifying
# this same file as the Perl program and use the -x option to cause the Perl
# interpreter to skip down to the Perl code.  The reason we do this instead of
# just making /usr/bin/perl the script interpreter (instead of /bin/sh) is
# that the user may have multiple Perl interpreters and the one he wants to
# use is properly located in the PATH.  The user's choice of Perl interpreter
# may be crucial, such as when the user also has a PERL5LIB environment
# variable and it selects modules that work with only a certain main
# interpreter program.
#
# An alternative some people use is to have /usr/bin/env as the script
# interpreter.  We don't do that because we think the existence and
# compatibility of /bin/sh is more reliable.
#
# Note that we aren't concerned about efficiency because the user who needs
# high efficiency can use directly the programs that this program invokes.
#
##############################################################################

exec perl -w -x -S -- "$0" "$@"

#!/usr/bin/perl
use strict;
use Getopt::Long;
use File::Temp;

my ($FALSE, $TRUE) = (0,1);

(my $myname = $0) =~ s#\A.*/##;



sub doVersionHack($) {
    my ($argvR) = @_;

    my $arg1 = $argvR->[0];

    if (defined($arg1) && (($arg1 eq "--version") || ($arg1 eq "-version"))) {
        my $termStatus = system('pgmramp', '--version');
        exit($termStatus == 0 ? 0 : 1);
    }
}



sub fatal($) {
    my ($msg) = @_;

    print(STDERR "ppmrainbow: $msg\n");
    exit(1);
}



##############################################################################
#
#                                 MAINLINE
#
##############################################################################

doVersionHack(\@ARGV);

my ($Twid, $Thgt, $tmpdir, $repeat, $verbose);

# set defaults
$Twid = 600;
$Thgt = 8;
$tmpdir = $ENV{"TMPDIR"} || "/tmp";
$repeat = $TRUE;
$verbose = $FALSE;

GetOptions("width=i"   => \$Twid,
           "height=i"  => \$Thgt,
           "tmpdir=s"  => \$tmpdir,
           "repeat!"   => \$repeat,
           "verbose!"  => \$verbose);

if ($Twid < 1 || $Thgt < 1) {
    fatal("invalid width and/or height");
}
my $verboseCommand = $verbose ? "set -x;" : "";

if (@ARGV < 1) {
    fatal("You must specify at least one color as an argument");
} elsif (@ARGV < 2 && ! $repeat) {
    fatal("With the -norepeat option, you must specify at least two colors " .
          "as arguments.");
}

my @colorlist;

@colorlist = @ARGV;
if ($repeat) {
    push @colorlist, $ARGV[0];
}

my $ourtmp = File::Temp::tempdir("$tmpdir/ppmrainbowXXXX", UNLINK=>1);

my $widthRemaining;
my $n;
my @outlist;

$n = 0;
$widthRemaining = $Twid;
@outlist = ();

while (@colorlist >= 2) {
    my $outfile = sprintf("%s/file.%03u.ppm", $ourtmp, $n);
    push(@outlist, $outfile);

    my $w = int(($widthRemaining-1)/(@colorlist-1))+1;
    my $rc = system("$verboseCommand pgmramp -lr $w $Thgt | " .
                    "pgmtoppm \"$colorlist[0]-$colorlist[1]\" >$outfile");
    if ($rc != 0) {
        fatal("pgmramp|pgmtoppm pipe failed.");
    }
    $widthRemaining -= $w;
    $n++;
    shift @colorlist;
}

0 == system qq{$verboseCommand pnmcat -lr @outlist}
    or exit 1;

exit 0;

END {
    if (@outlist) {
        unlink(@outlist);
    }
    if (defined($ourtmp)) {
        rmdir($ourtmp);
    }
}
