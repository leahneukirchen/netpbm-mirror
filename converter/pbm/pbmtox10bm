#!/bin/sh

##############################################################################
# This is essentially a Perl program.  We exec the Perl interpreter specifying
# this same file as the Perl program and use the -x option to cause the Perl
# interpreter to skip down to the Perl code.  The reason we do this instead of
# just making /usr/bin/perl the script interpreter (instead of /bin/sh) is
# that the user may have multiple Perl interpreters and the one he wants to
# use is properly located in the PATH.  The user's choice of Perl interpreter
# may be crucial, such as when the user also has a PERL5LIB environment
# variable and it selects modules that work with only a certain main
# interpreter program.
#
# An alternative some people use is to have /usr/bin/env as the script
# interpreter.  We don't do that because we think the existence and
# compatibility of /bin/sh is more reliable.
#
# Note that we aren't concerned about efficiency because the user who needs
# high efficiency can use directly the programs that this program invokes.
#
##############################################################################

exec perl -w -x -S -- "$0" "$@"

#! /usr/bin/perl

#============================================================================
#  This is a compatibility interface to Pbmtoxbm.
#
#  It exists so existing programs and procedures that rely on Pbmtox10bm
#  syntax continue to work.  You should not make new use of Pbmtox10bm and
#  if you modify an old use, you should upgrade it to use Pbmtoxbm.
#
#  Pbmtoxbm with the -x10 option is backward compatible with Pbmtox10bm.
#============================================================================

use strict;
use File::Basename;
use Cwd 'abs_path';

sub doVersionHack($) {
    my ($argvR) = @_;

    my $arg1 = $argvR->[0];

    if (defined($arg1) && (($arg1 eq "--version") || ($arg1 eq "-version"))) {
        my $termStatus = system('pbmtoxbm', '--version');
        exit($termStatus == 0 ? 0 : 1);
    }
}

doVersionHack(\@ARGV);

my $infile;

foreach (@ARGV) {
    if (/^-/) {
        # It's an option.  But Pbmtox10bm didn't have any options.
        print(STDERR "Invalid option '$_'\n");
        exit(10);
    } else {
        # It's a parameter
        if (defined($infile)) {
            print(STDERR
                  "You may specify at most one non-option parameter.\n");
            exit(10);
        } else {
            $infile = $_;
        }
    }
}

my $infileParm = defined($infile) ? $infile : "-";

# We want to get Pbmtoxbm from the same directory we came from if
# it's there.  Frequently, the directory containing Netpbm programs is
# not in the PATH and we were invoked by absolute path.

my $my_directory = abs_path(dirname($0));
$ENV{"PATH"} = $my_directory . ":" . $ENV{"PATH"};

exec('pbmtoxbm', '-x10', $infileParm);
