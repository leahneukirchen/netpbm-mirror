#!/bin/sh

##############################################################################
# This is essentially a Perl program.  We exec the Perl interpreter specifying
# this same file as the Perl program and use the -x option to cause the Perl
# interpreter to skip down to the Perl code.  The reason we do this instead of
# just making /usr/bin/perl the script interpreter (instead of /bin/sh) is
# that the user may have multiple Perl interpreters and the one he wants to
# use is properly located in the PATH.  The user's choice of Perl interpreter
# may be crucial, such as when the user also has a PERL5LIB environment
# variable and it selects modules that work with only a certain main
# interpreter program.
#
# An alternative some people use is to have /usr/bin/env as the script
# interpreter.  We don't do that because we think the existence and
# compatibility of /bin/sh is more reliable.
#
# Note that we aren't concerned about efficiency because the user who needs
# high efficiency can use directly the programs that this program invokes.
#
##############################################################################

exec perl -w -x -S -- "$0" "$@"

#!/usr/bin/perl
#============================================================================
#  This is a compatibility interface to Pamflip.
#
#  It exists so existing programs and procedures that rely on Pnmflip
#  syntax continue to work.  You should not make new use of Pnmflip and
#  if you modify an old use, you should upgrade it to use Pamflip.
#
#  The one way that Pamflip is not backward compatible with Pnmflip is
#  that with Pnmflip, you can do this:
#
#     pnmflip -xy -tb
#
#  and that causes pnmflip to do both transformations (i.e. the same thing
#  as -r270).  With Pamflip, you can't specify multiple (or zero) flip
#  type options.  Instead, you would use the -xform option:
#
#    pamflip -xform=transpose,topbottom
#
#============================================================================

use strict;
use File::Basename;
use Cwd 'abs_path';
use IO::Handle;

sub pm_message($) {
    STDERR->print("pnmflip: $_[0]\n");
}



my $xformOpt;
my @miscOptions;
my $infile;

$xformOpt = '-xform=';  # initial value 

@miscOptions = ();

foreach (@ARGV) {
    if (/^-/) {
        # It's an option
        if (/^-lr$/ || /^-le.*$/) {
            $xformOpt .= "leftright,";
        } elsif (/^-tb$/ || /^-to.*$/) {
            $xformOpt .= "topbottom,";
        } elsif (/^-x.*$/ || /^-tr.*$/) {
            $xformOpt .= "transpose,";
        } elsif (/^-r9.*$/ || /^-rotate9.*$/ || /^-cc.*$/) {
            $xformOpt .= "transpose,topbottom,";
        } elsif (/^-r1.*$/ || /^-rotate1.*$/) {
            $xformOpt .= "leftright,topbottom,";
        } elsif (/^-r2.*$/ || /^-rotate2.*$/ || /^-cw$/) {
            $xformOpt .= "transpose,leftright,";
        } else {
            # It's not a transformation option; could be a Netpbm common
            # option.
            push(@miscOptions, $_);
        }
    } else {
        # It's a parameter
        if (defined($infile)) {
            pm_message("You may specify at most one non-option parameter.");
            exit(10);
        } else {
            $infile = $_;
        }
    }
}

# Finish off the -xform option by removing any trailing comma

$/ = ',';
chomp($xformOpt);

my $infileParm = defined($infile) ? $infile : "-";

# We want to get Pamflip from the same directory we came from if
# it's there.  Frequently, the directory containing Netpbm programs is
# not in the PATH and we were invoked by absolute path.

my $my_directory = abs_path(dirname($0));
$ENV{"PATH"} = $my_directory . ":" . $ENV{"PATH"};

exec("pamflip", @miscOptions, $xformOpt, $infileParm);
